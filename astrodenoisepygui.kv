#:kivy 2.1.0
#:import utils kivy.utils
#:import np numpy
#:import Path pathlib.Path

<Separator@Widget>:
    rgba: 1, 1, 1, 1
    canvas:
        Color:
            rgba: self.rgba
        Rectangle:
            pos: self.pos
            size: self.size

<VSeparator@Separator>:
    size_hint_x: None
    width: dp(2)

<HSeparator@Separator>:
    size_hint_y: None
    height: dp(2)

<ToolLabel@Label>:
    font_size: '13sp'
    size_hint_y: None
    height: '32dp'                

<MySlider>:
    cursor_size: '28dp','28dp'

<MySliderTextInput@TextInput>:
    size_hint: None, None
    width: 65
    height: '28dp'
    font_size: '13sp'
    halign: 'right'
    multiline: False

<SliderToolLayout0@GridLayout>:
    size_hint_y: None
    height: '64dp'
    rows: 2

<SliderToolLayout@GridLayout>:
    size_hint_y: None
    height: '64dp'
    canvas.before:
        Color:
            rgb: utils.get_color_from_hex("#30739a")
        Rectangle:
            size: self.size
            pos: self.pos
    rows: 2

<SliderToolLayout1@GridLayout>:
    size_hint_y: None
    height: '64dp'
    canvas.before:
        Color:
            rgb: utils.get_color_from_hex("#233067")
        Rectangle:
            size: self.size
            pos: self.pos
    rows: 2

Root:
    id: main
    BoxLayout:
        orientation: 'vertical'
        GridLayout:
            cols: 2
            size: root.width, root.height
            GridLayout:
                rows: 16
                size_hint_x: None
                width: '280dp'
                Button:
                    id: my_widget
                    size_hint_y: None
                    height: '32dp'                   
                    text: "Load Image..."
                    on_release: root.show_load()
                SliderToolLayout0:
                    ToolLabel:
                        text: 'Re-scale Image'
                    BoxLayout:                        
                        MySlider:
                            id: s4
                            min: 1
                            max: 4
                            value: main.sizing
                            step: 1
                            on_slider_release: main.sizing = self.value
                        MySliderTextInput:
                            text: '{:n}'.format(s4.value)
                            on_text_validate: main.sizing = str(np.clip(float(self.text),s4.min,s4.max))
                            input_filter: 'int'
                BoxLayout:                    
                    canvas.before:
                        Color:
                            rgb: utils.get_color_from_hex("#30739a")
                        Rectangle:
                            size: self.size
                            pos: self.pos
                    size_hint: 1, None
                    height: '32dp'
                    ToolLabel:
                        text: 'Normalize'
                    CheckBox:
                        size_hint_y: None
                        height: '32dp'
                        on_active: root.normalize_check(self, self.active)
                        active: main.normalize_enabled
                    Button:
                        size_hint_y: None
                        height: '32dp'
                        text: "Reset"
                        on_release: root.reset_sliders()
                SliderToolLayout:
                    ToolLabel:
                        text: 'STF Stretch C (Low Clipping)'
                    BoxLayout:
                        MySlider:
                            id: s1
                            min: -4
                            max: 0
                            step: 0.1
                            value: main.stfC
                            on_slider_release: main.stfC = self.value
                        MySliderTextInput:
                            text: '{:.3f}'.format(s1.value)
                            on_text_validate: main.stfC = '{:.3f}'.format(np.clip(float(self.text),s1.min,s1.max))
                            input_filter: 'float'
                SliderToolLayout:
                    ToolLabel:
                        text: 'STF Stretch B (Strength)'
                    BoxLayout:                    
                        MySlider:
                            id: s2
                            min: 0
                            max: 1
                            value: main.stfB
                            step: 0.005
                            on_slider_release: main.stfB = self.value
                        MySliderTextInput:
                            text: '{:.3f}'.format(s2.value)
                            on_text_validate: main.stfB = '{:.3f}'.format(np.clip(float(self.text),s2.min,s2.max))
                            input_filter: 'float'
                BoxLayout:                    
                    canvas.before:
                        Color:
                            rgb: utils.get_color_from_hex("#233067")
                        Rectangle:
                            size: self.size
                            pos: self.pos
                    size_hint_y: None
                    height: '32dp'
                    ToolLabel:
                        text: 'Denoise Model'
                    Button:
                        size_hint_y: None
                        height: '32dp'
                        id: my_widget_process
                        text: "Select..."
                        on_release: root.select_model()
                SliderToolLayout1:
                    ToolLabel:
                        text: 'Denoise Strength'
                    BoxLayout:                    
                        MySlider:
                            id: s5
                            min: 0
                            max: 1
                            value: main.expand_low
                            step: 0.01
                            on_slider_release: main.expand_low = self.value
                        MySliderTextInput:
                            text: '{:.3f}'.format(s5.value)
                            on_text_validate: main.expand_low = '{:.3f}'.format(np.clip(float(self.text),s5.min,s5.max))
                            input_filter: 'float'
                SliderToolLayout1:
                    ToolLabel:
                        text: 'Denoise Tiling'
                    BoxLayout:                    
                        MySlider:
                            id: s3
                            min: 1
                            max: 4
                            value: main.tilling
                            step: 1
                            on_slider_release: main.tilling = self.value
                        MySliderTextInput:
                            text: '{:n}'.format(s3.value)
                            on_text_validate: main.tilling = str(np.clip(float(self.text),s3.min,s3.max))
                            input_filter: 'int'
                BoxLayout:
                    canvas.before:
                        Color:
                            rgb: utils.get_color_from_hex("#233067")
                        Rectangle:
                            size: self.size
                            pos: self.pos
                    size_hint_y: None
                    height: '32dp'
                    ToolLabel:
                        text: 'Auto Update'
                    CheckBox:
                        size_hint_y: None
                        height: '32dp'
                        on_active: root.autoupdate_check(self, self.active)
                        active: main.autoupdate_enabled
                    Spinner:
                        text: main.selected_device
                        values: ['GPU','CPU']
                        size_hint_y: None
                        height: '32dp'
                        on_text: root.update_device(self.text)
                        halign: 'left'
                        valign: 'middle'
                BoxLayout:                    
                    canvas.before:
                        Color:
                            rgb: utils.get_color_from_hex("#233067")
                        Rectangle:
                            size: self.size
                            pos: self.pos
                    size_hint_y: None
                    height: '32dp'
                    ToolLabel:
                        text: 'Denoise'
                    CheckBox:
                        size_hint_y: None
                        height: '32dp'
                        on_active: root.denoise_check(self, self.active)
                        active: main.denoise_enabled
                    Button:
                        size_hint_y: None
                        height: '32dp'
                        id: my_widget_process
                        text: "Process"
                        on_release: root.start_process()
                SliderToolLayout1:
                    ToolLabel:
                        text: 'Denoise Progress'
                    ProgressBar:
                        id: pb
                        size_hint_x: .5
                        size_hint_y: None
                        height: '5dp'
                        value_normalized: main.progress
                HSeparator:
                    rgba: 1, 1, 1, 0
                    height: dp(10)
                Button:
                    pos_hint: {'top': 0.8}
                    size_hint_y: None
                    height: '38dp'
                    text: "Save Image as..."
                    on_release: root.show_save()
                HSeparator:
                    rgba: 1, 1, 1, 0
                    height: dp(10)
                StackLayout:
                    size_hint_y: None
                    Label:
                        text: 'Image Info:'
                        height: '20dp'
                        size_hint: 1, None
                    Label:
                        text: 'WxH:{}'.format(main.imageout.size) if main.imageout else 'WxH:(0,0)'
                        height: '20dp'
                        size_hint: 1, None
                        halign: 'left'
                        shorten: True
                        padding_x: '5dp'
                        text_size: self.size
                    Label:
                        text: 'Model:{}'.format(main.selected_model) if main.selected_model else 'Model:None'
                        height: '20dp'
                        size_hint: 1, None
                        shorten: True
                        halign: 'left'
                        padding_x: '5dp'
                        text_size: self.size
                    Label:
                        height: '20dp'
                        size_hint: 1, None
                        text: 'Snapshot Info:'
                        halign: 'left'
                        padding_x: '5dp'
                    Label:
                        text: main.snapshotinfo
                        size_hint_y: None
                        size_hint_x: None
                        halign: 'left'
                        padding_x: '5dp'
                        height: self.texture_size[1]
                        

            MyZoomFloatLayout:
                id: myzoom
                imageout: main.imageout
                imageoutzoom: imageout
                Image:
                    id: imageout
                    allow_stretch: True
        ActionBar:
            ActionView:
                spacing: 5
                id: av
                ActionPrevious:
                    title: 'AstroDenoisePy'
                ActionToggleButton:
                    text: 'Show Original'                    
                    icon: 'astrodenoisepy/data/eye-outline.png'
                    state: 'down' if main.denoise_enabled else 'normal'
                    on_release: main.denoise_enabled = True if self.state == 'down' else False
                ActionButton:
                    text: 'Add Snapshot'                    
                    icon: 'astrodenoisepy/data/log-out-outline.png'
                    on_release: root.take_snapshot()
                ActionSeparator:
                ActionSeparator:
                ActionButton:
                    text: 'Open...'
                    icon: 'astrodenoisepy/data/file-outline.png'
                    on_release: root.show_load()
                ActionButton:
                    text: 'Save as...'
                    icon: 'astrodenoisepy/data/save-outline.png'
                    on_release: root.show_save()

<LoadDialog>:
    BoxLayout:
        size: root.size
        pos: root.pos
        orientation: "vertical"
        BoxLayout:
            size_hint_y: None
            height: 30
            Label:
                text: 'Path:'
                size_hint_x: self.text_size[0]
                size_hint_y: None
                height: 30
            TextInput:
                id: path_input
                size_hint_y: None
                height: 30
                multiline: False
                text: filechooser.path
                on_text_validate: filechooser.path = self.text
            ToggleButton:
                text: 'Show Original'
                group: 'sort'                 
            ToggleButton:
                text: 'Show Original'                    
                group: 'sort'                 
            ToggleButton:
                text: 'Show Original'                    
                group: 'sort'                 
        FileChooserListView:
            id: filechooser
            filters: ['*.tif','*.tiff','*.fit','*.fits','*.fts']
            path: app.lastpath
            #sort_func: root.sort_by_date
        BoxLayout:
            size_hint_y: None
            height: 30
            Button:
                text: "Cancel"
                on_release: root.cancel()
            Button:
                text: "Load"
                on_release: root.load(filechooser.selection)

<SaveDialog>:
    text_input: text_input
    BoxLayout:
        size: root.size
        pos: root.pos
        orientation: "vertical"
        FileChooserListView:
            id: filechooser
            filters: ['*.tif','*.tiff','*.fit','*.fits','*.fts']
            on_selection: text_input.text = self.selection and self.selection[0] or ''
            path: app.lastpath
            #sort_func: root.sort_by_date
        TextInput:
            id: text_input
            size_hint_y: None
            height: 30
            multiline: False
            on_text_validate: filechooser.path = str(Path(self.text).parent) if str(Path(self.text).parent) != filechooser.path and str(Path(self.text).parent) != '.' and Path(self.text).parent.exists() else filechooser.path
        BoxLayout:
            size_hint_y: None
            height: 30
            Button:
                text: "Cancel"
                on_release: root.cancel()
            Button:
                text: "Save"
                on_release: root.save(str(Path(filechooser.path, text_input.text)))